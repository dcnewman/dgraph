// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: graphresponse.proto

#include "graphresponse.pb.h"
#include "graphresponse.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace graph {

static const char* Dgraph_method_names[] = {
  "/graph.Dgraph/Query",
};

std::unique_ptr< Dgraph::Stub> Dgraph::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< Dgraph::Stub> stub(new Dgraph::Stub(channel));
  return stub;
}

Dgraph::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Query_(Dgraph_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Dgraph::Stub::Query(::grpc::ClientContext* context, const ::graph::Request& request, ::graph::Response* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Query_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::graph::Response>* Dgraph::Stub::AsyncQueryRaw(::grpc::ClientContext* context, const ::graph::Request& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::graph::Response>(channel_.get(), cq, rpcmethod_Query_, context, request);
}

Dgraph::Service::Service() {
  (void)Dgraph_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      Dgraph_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Dgraph::Service, ::graph::Request, ::graph::Response>(
          std::mem_fn(&Dgraph::Service::Query), this)));
}

Dgraph::Service::~Service() {
}

::grpc::Status Dgraph::Service::Query(::grpc::ServerContext* context, const ::graph::Request* request, ::graph::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace graph

