// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: graphresponse.proto

#ifndef PROTOBUF_graphresponse_2eproto__INCLUDED
#define PROTOBUF_graphresponse_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace graph {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_graphresponse_2eproto();
void protobuf_AssignDesc_graphresponse_2eproto();
void protobuf_ShutdownFile_graphresponse_2eproto();

class Latency;
class Node;
class Property;
class Request;
class Response;

// ===================================================================

class Request : public ::google::protobuf::Message {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  void Swap(Request* other);

  // implements Message ----------------------------------------------

  inline Request* New() const { return New(NULL); }

  Request* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:graph.Request)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_graphresponse_2eproto();
  friend void protobuf_AssignDesc_graphresponse_2eproto();
  friend void protobuf_ShutdownFile_graphresponse_2eproto();

  void InitAsDefaultInstance();
  static Request* default_instance_;
};
// -------------------------------------------------------------------

class Latency : public ::google::protobuf::Message {
 public:
  Latency();
  virtual ~Latency();

  Latency(const Latency& from);

  inline Latency& operator=(const Latency& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Latency& default_instance();

  void Swap(Latency* other);

  // implements Message ----------------------------------------------

  inline Latency* New() const { return New(NULL); }

  Latency* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Latency& from);
  void MergeFrom(const Latency& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Latency* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string parsing = 1;
  void clear_parsing();
  static const int kParsingFieldNumber = 1;
  const ::std::string& parsing() const;
  void set_parsing(const ::std::string& value);
  void set_parsing(const char* value);
  void set_parsing(const char* value, size_t size);
  ::std::string* mutable_parsing();
  ::std::string* release_parsing();
  void set_allocated_parsing(::std::string* parsing);

  // optional string processing = 2;
  void clear_processing();
  static const int kProcessingFieldNumber = 2;
  const ::std::string& processing() const;
  void set_processing(const ::std::string& value);
  void set_processing(const char* value);
  void set_processing(const char* value, size_t size);
  ::std::string* mutable_processing();
  ::std::string* release_processing();
  void set_allocated_processing(::std::string* processing);

  // optional string pb = 3;
  void clear_pb();
  static const int kPbFieldNumber = 3;
  const ::std::string& pb() const;
  void set_pb(const ::std::string& value);
  void set_pb(const char* value);
  void set_pb(const char* value, size_t size);
  ::std::string* mutable_pb();
  ::std::string* release_pb();
  void set_allocated_pb(::std::string* pb);

  // @@protoc_insertion_point(class_scope:graph.Latency)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr parsing_;
  ::google::protobuf::internal::ArenaStringPtr processing_;
  ::google::protobuf::internal::ArenaStringPtr pb_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_graphresponse_2eproto();
  friend void protobuf_AssignDesc_graphresponse_2eproto();
  friend void protobuf_ShutdownFile_graphresponse_2eproto();

  void InitAsDefaultInstance();
  static Latency* default_instance_;
};
// -------------------------------------------------------------------

class Property : public ::google::protobuf::Message {
 public:
  Property();
  virtual ~Property();

  Property(const Property& from);

  inline Property& operator=(const Property& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Property& default_instance();

  void Swap(Property* other);

  // implements Message ----------------------------------------------

  inline Property* New() const { return New(NULL); }

  Property* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Property& from);
  void MergeFrom(const Property& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Property* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string prop = 1;
  void clear_prop();
  static const int kPropFieldNumber = 1;
  const ::std::string& prop() const;
  void set_prop(const ::std::string& value);
  void set_prop(const char* value);
  void set_prop(const char* value, size_t size);
  ::std::string* mutable_prop();
  ::std::string* release_prop();
  void set_allocated_prop(::std::string* prop);

  // optional bytes val = 2;
  void clear_val();
  static const int kValFieldNumber = 2;
  const ::std::string& val() const;
  void set_val(const ::std::string& value);
  void set_val(const char* value);
  void set_val(const void* value, size_t size);
  ::std::string* mutable_val();
  ::std::string* release_val();
  void set_allocated_val(::std::string* val);

  // @@protoc_insertion_point(class_scope:graph.Property)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr prop_;
  ::google::protobuf::internal::ArenaStringPtr val_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_graphresponse_2eproto();
  friend void protobuf_AssignDesc_graphresponse_2eproto();
  friend void protobuf_ShutdownFile_graphresponse_2eproto();

  void InitAsDefaultInstance();
  static Property* default_instance_;
};
// -------------------------------------------------------------------

class Node : public ::google::protobuf::Message {
 public:
  Node();
  virtual ~Node();

  Node(const Node& from);

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Node& default_instance();

  void Swap(Node* other);

  // implements Message ----------------------------------------------

  inline Node* New() const { return New(NULL); }

  Node* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Node& from);
  void MergeFrom(const Node& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Node* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 uid = 1;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  ::google::protobuf::uint64 uid() const;
  void set_uid(::google::protobuf::uint64 value);

  // optional string xid = 2;
  void clear_xid();
  static const int kXidFieldNumber = 2;
  const ::std::string& xid() const;
  void set_xid(const ::std::string& value);
  void set_xid(const char* value);
  void set_xid(const char* value, size_t size);
  ::std::string* mutable_xid();
  ::std::string* release_xid();
  void set_allocated_xid(::std::string* xid);

  // optional string attribute = 3;
  void clear_attribute();
  static const int kAttributeFieldNumber = 3;
  const ::std::string& attribute() const;
  void set_attribute(const ::std::string& value);
  void set_attribute(const char* value);
  void set_attribute(const char* value, size_t size);
  ::std::string* mutable_attribute();
  ::std::string* release_attribute();
  void set_allocated_attribute(::std::string* attribute);

  // repeated .graph.Property properties = 4;
  int properties_size() const;
  void clear_properties();
  static const int kPropertiesFieldNumber = 4;
  const ::graph::Property& properties(int index) const;
  ::graph::Property* mutable_properties(int index);
  ::graph::Property* add_properties();
  ::google::protobuf::RepeatedPtrField< ::graph::Property >*
      mutable_properties();
  const ::google::protobuf::RepeatedPtrField< ::graph::Property >&
      properties() const;

  // repeated .graph.Node children = 5;
  int children_size() const;
  void clear_children();
  static const int kChildrenFieldNumber = 5;
  const ::graph::Node& children(int index) const;
  ::graph::Node* mutable_children(int index);
  ::graph::Node* add_children();
  ::google::protobuf::RepeatedPtrField< ::graph::Node >*
      mutable_children();
  const ::google::protobuf::RepeatedPtrField< ::graph::Node >&
      children() const;

  // @@protoc_insertion_point(class_scope:graph.Node)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 uid_;
  ::google::protobuf::internal::ArenaStringPtr xid_;
  ::google::protobuf::internal::ArenaStringPtr attribute_;
  ::google::protobuf::RepeatedPtrField< ::graph::Property > properties_;
  ::google::protobuf::RepeatedPtrField< ::graph::Node > children_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_graphresponse_2eproto();
  friend void protobuf_AssignDesc_graphresponse_2eproto();
  friend void protobuf_ShutdownFile_graphresponse_2eproto();

  void InitAsDefaultInstance();
  static Node* default_instance_;
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  void Swap(Response* other);

  // implements Message ----------------------------------------------

  inline Response* New() const { return New(NULL); }

  Response* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .graph.Node n = 1;
  bool has_n() const;
  void clear_n();
  static const int kNFieldNumber = 1;
  const ::graph::Node& n() const;
  ::graph::Node* mutable_n();
  ::graph::Node* release_n();
  void set_allocated_n(::graph::Node* n);

  // optional .graph.Latency l = 2;
  bool has_l() const;
  void clear_l();
  static const int kLFieldNumber = 2;
  const ::graph::Latency& l() const;
  ::graph::Latency* mutable_l();
  ::graph::Latency* release_l();
  void set_allocated_l(::graph::Latency* l);

  // @@protoc_insertion_point(class_scope:graph.Response)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::graph::Node* n_;
  ::graph::Latency* l_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_graphresponse_2eproto();
  friend void protobuf_AssignDesc_graphresponse_2eproto();
  friend void protobuf_ShutdownFile_graphresponse_2eproto();

  void InitAsDefaultInstance();
  static Response* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Request

// optional string query = 1;
inline void Request::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Request::query() const {
  // @@protoc_insertion_point(field_get:graph.Request.query)
  return query_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:graph.Request.query)
}
inline void Request::set_query(const char* value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:graph.Request.query)
}
inline void Request::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:graph.Request.query)
}
inline ::std::string* Request::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:graph.Request.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_query() {
  // @@protoc_insertion_point(field_release:graph.Request.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:graph.Request.query)
}

// -------------------------------------------------------------------

// Latency

// optional string parsing = 1;
inline void Latency::clear_parsing() {
  parsing_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Latency::parsing() const {
  // @@protoc_insertion_point(field_get:graph.Latency.parsing)
  return parsing_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Latency::set_parsing(const ::std::string& value) {
  
  parsing_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:graph.Latency.parsing)
}
inline void Latency::set_parsing(const char* value) {
  
  parsing_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:graph.Latency.parsing)
}
inline void Latency::set_parsing(const char* value, size_t size) {
  
  parsing_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:graph.Latency.parsing)
}
inline ::std::string* Latency::mutable_parsing() {
  
  // @@protoc_insertion_point(field_mutable:graph.Latency.parsing)
  return parsing_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Latency::release_parsing() {
  // @@protoc_insertion_point(field_release:graph.Latency.parsing)
  
  return parsing_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Latency::set_allocated_parsing(::std::string* parsing) {
  if (parsing != NULL) {
    
  } else {
    
  }
  parsing_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parsing);
  // @@protoc_insertion_point(field_set_allocated:graph.Latency.parsing)
}

// optional string processing = 2;
inline void Latency::clear_processing() {
  processing_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Latency::processing() const {
  // @@protoc_insertion_point(field_get:graph.Latency.processing)
  return processing_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Latency::set_processing(const ::std::string& value) {
  
  processing_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:graph.Latency.processing)
}
inline void Latency::set_processing(const char* value) {
  
  processing_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:graph.Latency.processing)
}
inline void Latency::set_processing(const char* value, size_t size) {
  
  processing_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:graph.Latency.processing)
}
inline ::std::string* Latency::mutable_processing() {
  
  // @@protoc_insertion_point(field_mutable:graph.Latency.processing)
  return processing_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Latency::release_processing() {
  // @@protoc_insertion_point(field_release:graph.Latency.processing)
  
  return processing_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Latency::set_allocated_processing(::std::string* processing) {
  if (processing != NULL) {
    
  } else {
    
  }
  processing_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), processing);
  // @@protoc_insertion_point(field_set_allocated:graph.Latency.processing)
}

// optional string pb = 3;
inline void Latency::clear_pb() {
  pb_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Latency::pb() const {
  // @@protoc_insertion_point(field_get:graph.Latency.pb)
  return pb_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Latency::set_pb(const ::std::string& value) {
  
  pb_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:graph.Latency.pb)
}
inline void Latency::set_pb(const char* value) {
  
  pb_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:graph.Latency.pb)
}
inline void Latency::set_pb(const char* value, size_t size) {
  
  pb_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:graph.Latency.pb)
}
inline ::std::string* Latency::mutable_pb() {
  
  // @@protoc_insertion_point(field_mutable:graph.Latency.pb)
  return pb_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Latency::release_pb() {
  // @@protoc_insertion_point(field_release:graph.Latency.pb)
  
  return pb_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Latency::set_allocated_pb(::std::string* pb) {
  if (pb != NULL) {
    
  } else {
    
  }
  pb_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pb);
  // @@protoc_insertion_point(field_set_allocated:graph.Latency.pb)
}

// -------------------------------------------------------------------

// Property

// optional string prop = 1;
inline void Property::clear_prop() {
  prop_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Property::prop() const {
  // @@protoc_insertion_point(field_get:graph.Property.prop)
  return prop_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Property::set_prop(const ::std::string& value) {
  
  prop_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:graph.Property.prop)
}
inline void Property::set_prop(const char* value) {
  
  prop_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:graph.Property.prop)
}
inline void Property::set_prop(const char* value, size_t size) {
  
  prop_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:graph.Property.prop)
}
inline ::std::string* Property::mutable_prop() {
  
  // @@protoc_insertion_point(field_mutable:graph.Property.prop)
  return prop_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Property::release_prop() {
  // @@protoc_insertion_point(field_release:graph.Property.prop)
  
  return prop_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Property::set_allocated_prop(::std::string* prop) {
  if (prop != NULL) {
    
  } else {
    
  }
  prop_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prop);
  // @@protoc_insertion_point(field_set_allocated:graph.Property.prop)
}

// optional bytes val = 2;
inline void Property::clear_val() {
  val_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Property::val() const {
  // @@protoc_insertion_point(field_get:graph.Property.val)
  return val_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Property::set_val(const ::std::string& value) {
  
  val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:graph.Property.val)
}
inline void Property::set_val(const char* value) {
  
  val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:graph.Property.val)
}
inline void Property::set_val(const void* value, size_t size) {
  
  val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:graph.Property.val)
}
inline ::std::string* Property::mutable_val() {
  
  // @@protoc_insertion_point(field_mutable:graph.Property.val)
  return val_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Property::release_val() {
  // @@protoc_insertion_point(field_release:graph.Property.val)
  
  return val_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Property::set_allocated_val(::std::string* val) {
  if (val != NULL) {
    
  } else {
    
  }
  val_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), val);
  // @@protoc_insertion_point(field_set_allocated:graph.Property.val)
}

// -------------------------------------------------------------------

// Node

// optional uint64 uid = 1;
inline void Node::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Node::uid() const {
  // @@protoc_insertion_point(field_get:graph.Node.uid)
  return uid_;
}
inline void Node::set_uid(::google::protobuf::uint64 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:graph.Node.uid)
}

// optional string xid = 2;
inline void Node::clear_xid() {
  xid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Node::xid() const {
  // @@protoc_insertion_point(field_get:graph.Node.xid)
  return xid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Node::set_xid(const ::std::string& value) {
  
  xid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:graph.Node.xid)
}
inline void Node::set_xid(const char* value) {
  
  xid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:graph.Node.xid)
}
inline void Node::set_xid(const char* value, size_t size) {
  
  xid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:graph.Node.xid)
}
inline ::std::string* Node::mutable_xid() {
  
  // @@protoc_insertion_point(field_mutable:graph.Node.xid)
  return xid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Node::release_xid() {
  // @@protoc_insertion_point(field_release:graph.Node.xid)
  
  return xid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Node::set_allocated_xid(::std::string* xid) {
  if (xid != NULL) {
    
  } else {
    
  }
  xid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), xid);
  // @@protoc_insertion_point(field_set_allocated:graph.Node.xid)
}

// optional string attribute = 3;
inline void Node::clear_attribute() {
  attribute_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Node::attribute() const {
  // @@protoc_insertion_point(field_get:graph.Node.attribute)
  return attribute_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Node::set_attribute(const ::std::string& value) {
  
  attribute_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:graph.Node.attribute)
}
inline void Node::set_attribute(const char* value) {
  
  attribute_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:graph.Node.attribute)
}
inline void Node::set_attribute(const char* value, size_t size) {
  
  attribute_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:graph.Node.attribute)
}
inline ::std::string* Node::mutable_attribute() {
  
  // @@protoc_insertion_point(field_mutable:graph.Node.attribute)
  return attribute_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Node::release_attribute() {
  // @@protoc_insertion_point(field_release:graph.Node.attribute)
  
  return attribute_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Node::set_allocated_attribute(::std::string* attribute) {
  if (attribute != NULL) {
    
  } else {
    
  }
  attribute_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attribute);
  // @@protoc_insertion_point(field_set_allocated:graph.Node.attribute)
}

// repeated .graph.Property properties = 4;
inline int Node::properties_size() const {
  return properties_.size();
}
inline void Node::clear_properties() {
  properties_.Clear();
}
inline const ::graph::Property& Node::properties(int index) const {
  // @@protoc_insertion_point(field_get:graph.Node.properties)
  return properties_.Get(index);
}
inline ::graph::Property* Node::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:graph.Node.properties)
  return properties_.Mutable(index);
}
inline ::graph::Property* Node::add_properties() {
  // @@protoc_insertion_point(field_add:graph.Node.properties)
  return properties_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::graph::Property >*
Node::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:graph.Node.properties)
  return &properties_;
}
inline const ::google::protobuf::RepeatedPtrField< ::graph::Property >&
Node::properties() const {
  // @@protoc_insertion_point(field_list:graph.Node.properties)
  return properties_;
}

// repeated .graph.Node children = 5;
inline int Node::children_size() const {
  return children_.size();
}
inline void Node::clear_children() {
  children_.Clear();
}
inline const ::graph::Node& Node::children(int index) const {
  // @@protoc_insertion_point(field_get:graph.Node.children)
  return children_.Get(index);
}
inline ::graph::Node* Node::mutable_children(int index) {
  // @@protoc_insertion_point(field_mutable:graph.Node.children)
  return children_.Mutable(index);
}
inline ::graph::Node* Node::add_children() {
  // @@protoc_insertion_point(field_add:graph.Node.children)
  return children_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::graph::Node >*
Node::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:graph.Node.children)
  return &children_;
}
inline const ::google::protobuf::RepeatedPtrField< ::graph::Node >&
Node::children() const {
  // @@protoc_insertion_point(field_list:graph.Node.children)
  return children_;
}

// -------------------------------------------------------------------

// Response

// optional .graph.Node n = 1;
inline bool Response::has_n() const {
  return !_is_default_instance_ && n_ != NULL;
}
inline void Response::clear_n() {
  if (GetArenaNoVirtual() == NULL && n_ != NULL) delete n_;
  n_ = NULL;
}
inline const ::graph::Node& Response::n() const {
  // @@protoc_insertion_point(field_get:graph.Response.n)
  return n_ != NULL ? *n_ : *default_instance_->n_;
}
inline ::graph::Node* Response::mutable_n() {
  
  if (n_ == NULL) {
    n_ = new ::graph::Node;
  }
  // @@protoc_insertion_point(field_mutable:graph.Response.n)
  return n_;
}
inline ::graph::Node* Response::release_n() {
  // @@protoc_insertion_point(field_release:graph.Response.n)
  
  ::graph::Node* temp = n_;
  n_ = NULL;
  return temp;
}
inline void Response::set_allocated_n(::graph::Node* n) {
  delete n_;
  n_ = n;
  if (n) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:graph.Response.n)
}

// optional .graph.Latency l = 2;
inline bool Response::has_l() const {
  return !_is_default_instance_ && l_ != NULL;
}
inline void Response::clear_l() {
  if (GetArenaNoVirtual() == NULL && l_ != NULL) delete l_;
  l_ = NULL;
}
inline const ::graph::Latency& Response::l() const {
  // @@protoc_insertion_point(field_get:graph.Response.l)
  return l_ != NULL ? *l_ : *default_instance_->l_;
}
inline ::graph::Latency* Response::mutable_l() {
  
  if (l_ == NULL) {
    l_ = new ::graph::Latency;
  }
  // @@protoc_insertion_point(field_mutable:graph.Response.l)
  return l_;
}
inline ::graph::Latency* Response::release_l() {
  // @@protoc_insertion_point(field_release:graph.Response.l)
  
  ::graph::Latency* temp = l_;
  l_ = NULL;
  return temp;
}
inline void Response::set_allocated_l(::graph::Latency* l) {
  delete l_;
  l_ = l;
  if (l) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:graph.Response.l)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace graph

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_graphresponse_2eproto__INCLUDED
