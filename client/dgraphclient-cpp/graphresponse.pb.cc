// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: graphresponse.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "graphresponse.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace graph {

namespace {

const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Latency_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Latency_reflection_ = NULL;
const ::google::protobuf::Descriptor* Property_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Property_reflection_ = NULL;
const ::google::protobuf::Descriptor* Node_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Node_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_graphresponse_2eproto() {
  protobuf_AddDesc_graphresponse_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "graphresponse.proto");
  GOOGLE_CHECK(file != NULL);
  Request_descriptor_ = file->message_type(0);
  static const int Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, query_),
  };
  Request_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_descriptor_,
      Request::default_instance_,
      Request_offsets_,
      -1,
      -1,
      -1,
      sizeof(Request),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _is_default_instance_));
  Latency_descriptor_ = file->message_type(1);
  static const int Latency_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Latency, parsing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Latency, processing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Latency, pb_),
  };
  Latency_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Latency_descriptor_,
      Latency::default_instance_,
      Latency_offsets_,
      -1,
      -1,
      -1,
      sizeof(Latency),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Latency, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Latency, _is_default_instance_));
  Property_descriptor_ = file->message_type(2);
  static const int Property_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Property, prop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Property, val_),
  };
  Property_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Property_descriptor_,
      Property::default_instance_,
      Property_offsets_,
      -1,
      -1,
      -1,
      sizeof(Property),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Property, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Property, _is_default_instance_));
  Node_descriptor_ = file->message_type(3);
  static const int Node_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, xid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, properties_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, children_),
  };
  Node_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Node_descriptor_,
      Node::default_instance_,
      Node_offsets_,
      -1,
      -1,
      -1,
      sizeof(Node),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, _is_default_instance_));
  Response_descriptor_ = file->message_type(4);
  static const int Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, n_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, l_),
  };
  Response_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Response_descriptor_,
      Response::default_instance_,
      Response_offsets_,
      -1,
      -1,
      -1,
      sizeof(Response),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_graphresponse_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_descriptor_, &Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Latency_descriptor_, &Latency::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Property_descriptor_, &Property::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Node_descriptor_, &Node::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Response_descriptor_, &Response::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_graphresponse_2eproto() {
  delete Request::default_instance_;
  delete Request_reflection_;
  delete Latency::default_instance_;
  delete Latency_reflection_;
  delete Property::default_instance_;
  delete Property_reflection_;
  delete Node::default_instance_;
  delete Node_reflection_;
  delete Response::default_instance_;
  delete Response_reflection_;
}

void protobuf_AddDesc_graphresponse_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023graphresponse.proto\022\005graph\"\030\n\007Request\022"
    "\r\n\005query\030\001 \001(\t\":\n\007Latency\022\017\n\007parsing\030\001 \001"
    "(\t\022\022\n\nprocessing\030\002 \001(\t\022\n\n\002pb\030\003 \001(\t\"%\n\010Pr"
    "operty\022\014\n\004prop\030\001 \001(\t\022\013\n\003val\030\002 \001(\014\"w\n\004Nod"
    "e\022\013\n\003uid\030\001 \001(\004\022\013\n\003xid\030\002 \001(\t\022\021\n\tattribute"
    "\030\003 \001(\t\022#\n\nproperties\030\004 \003(\0132\017.graph.Prope"
    "rty\022\035\n\010children\030\005 \003(\0132\013.graph.Node\"=\n\010Re"
    "sponse\022\026\n\001n\030\001 \001(\0132\013.graph.Node\022\031\n\001l\030\002 \001("
    "\0132\016.graph.Latency24\n\006Dgraph\022*\n\005Query\022\016.g"
    "raph.Request\032\017.graph.Response\"\000b\006proto3", 399);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "graphresponse.proto", &protobuf_RegisterTypes);
  Request::default_instance_ = new Request();
  Latency::default_instance_ = new Latency();
  Property::default_instance_ = new Property();
  Node::default_instance_ = new Node();
  Response::default_instance_ = new Response();
  Request::default_instance_->InitAsDefaultInstance();
  Latency::default_instance_->InitAsDefaultInstance();
  Property::default_instance_->InitAsDefaultInstance();
  Node::default_instance_->InitAsDefaultInstance();
  Response::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_graphresponse_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_graphresponse_2eproto {
  StaticDescriptorInitializer_graphresponse_2eproto() {
    protobuf_AddDesc_graphresponse_2eproto();
  }
} static_descriptor_initializer_graphresponse_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request::kQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request::Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:graph.Request)
}

void Request::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Request::Request(const Request& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:graph.Request)
}

void Request::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:graph.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_graphresponse_2eproto();
  return *default_instance_;
}

Request* Request::default_instance_ = NULL;

Request* Request::New(::google::protobuf::Arena* arena) const {
  Request* n = new Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:graph.Request)
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:graph.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string query = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->query().data(), this->query().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "graph.Request.query"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:graph.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:graph.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:graph.Request)
  // optional string query = 1;
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "graph.Request.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->query(), output);
  }

  // @@protoc_insertion_point(serialize_end:graph.Request)
}

::google::protobuf::uint8* Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:graph.Request)
  // optional string query = 1;
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "graph.Request.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->query(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:graph.Request)
  return target;
}

int Request::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:graph.Request)
  int total_size = 0;

  // optional string query = 1;
  if (this->query().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:graph.Request)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Request* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:graph.Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:graph.Request)
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:graph.Request)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.query().size() > 0) {

    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:graph.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:graph.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {

  return true;
}

void Request::Swap(Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request::InternalSwap(Request* other) {
  query_.Swap(&other->query_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Request

// optional string query = 1;
void Request::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Request::query() const {
  // @@protoc_insertion_point(field_get:graph.Request.query)
  return query_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:graph.Request.query)
}
 void Request::set_query(const char* value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:graph.Request.query)
}
 void Request::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:graph.Request.query)
}
 ::std::string* Request::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:graph.Request.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Request::release_query() {
  // @@protoc_insertion_point(field_release:graph.Request.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:graph.Request.query)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Latency::kParsingFieldNumber;
const int Latency::kProcessingFieldNumber;
const int Latency::kPbFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Latency::Latency()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:graph.Latency)
}

void Latency::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Latency::Latency(const Latency& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:graph.Latency)
}

void Latency::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  parsing_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  processing_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pb_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Latency::~Latency() {
  // @@protoc_insertion_point(destructor:graph.Latency)
  SharedDtor();
}

void Latency::SharedDtor() {
  parsing_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  processing_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pb_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Latency::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Latency::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Latency_descriptor_;
}

const Latency& Latency::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_graphresponse_2eproto();
  return *default_instance_;
}

Latency* Latency::default_instance_ = NULL;

Latency* Latency::New(::google::protobuf::Arena* arena) const {
  Latency* n = new Latency;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Latency::Clear() {
// @@protoc_insertion_point(message_clear_start:graph.Latency)
  parsing_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  processing_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pb_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Latency::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:graph.Latency)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string parsing = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parsing()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->parsing().data(), this->parsing().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "graph.Latency.parsing"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_processing;
        break;
      }

      // optional string processing = 2;
      case 2: {
        if (tag == 18) {
         parse_processing:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_processing()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->processing().data(), this->processing().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "graph.Latency.processing"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pb;
        break;
      }

      // optional string pb = 3;
      case 3: {
        if (tag == 26) {
         parse_pb:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pb()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pb().data(), this->pb().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "graph.Latency.pb"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:graph.Latency)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:graph.Latency)
  return false;
#undef DO_
}

void Latency::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:graph.Latency)
  // optional string parsing = 1;
  if (this->parsing().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parsing().data(), this->parsing().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "graph.Latency.parsing");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->parsing(), output);
  }

  // optional string processing = 2;
  if (this->processing().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->processing().data(), this->processing().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "graph.Latency.processing");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->processing(), output);
  }

  // optional string pb = 3;
  if (this->pb().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pb().data(), this->pb().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "graph.Latency.pb");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->pb(), output);
  }

  // @@protoc_insertion_point(serialize_end:graph.Latency)
}

::google::protobuf::uint8* Latency::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:graph.Latency)
  // optional string parsing = 1;
  if (this->parsing().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parsing().data(), this->parsing().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "graph.Latency.parsing");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->parsing(), target);
  }

  // optional string processing = 2;
  if (this->processing().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->processing().data(), this->processing().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "graph.Latency.processing");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->processing(), target);
  }

  // optional string pb = 3;
  if (this->pb().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pb().data(), this->pb().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "graph.Latency.pb");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pb(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:graph.Latency)
  return target;
}

int Latency::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:graph.Latency)
  int total_size = 0;

  // optional string parsing = 1;
  if (this->parsing().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->parsing());
  }

  // optional string processing = 2;
  if (this->processing().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->processing());
  }

  // optional string pb = 3;
  if (this->pb().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pb());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Latency::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:graph.Latency)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Latency* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Latency>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:graph.Latency)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:graph.Latency)
    MergeFrom(*source);
  }
}

void Latency::MergeFrom(const Latency& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:graph.Latency)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.parsing().size() > 0) {

    parsing_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parsing_);
  }
  if (from.processing().size() > 0) {

    processing_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.processing_);
  }
  if (from.pb().size() > 0) {

    pb_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pb_);
  }
}

void Latency::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:graph.Latency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Latency::CopyFrom(const Latency& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:graph.Latency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Latency::IsInitialized() const {

  return true;
}

void Latency::Swap(Latency* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Latency::InternalSwap(Latency* other) {
  parsing_.Swap(&other->parsing_);
  processing_.Swap(&other->processing_);
  pb_.Swap(&other->pb_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Latency::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Latency_descriptor_;
  metadata.reflection = Latency_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Latency

// optional string parsing = 1;
void Latency::clear_parsing() {
  parsing_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Latency::parsing() const {
  // @@protoc_insertion_point(field_get:graph.Latency.parsing)
  return parsing_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Latency::set_parsing(const ::std::string& value) {
  
  parsing_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:graph.Latency.parsing)
}
 void Latency::set_parsing(const char* value) {
  
  parsing_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:graph.Latency.parsing)
}
 void Latency::set_parsing(const char* value, size_t size) {
  
  parsing_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:graph.Latency.parsing)
}
 ::std::string* Latency::mutable_parsing() {
  
  // @@protoc_insertion_point(field_mutable:graph.Latency.parsing)
  return parsing_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Latency::release_parsing() {
  // @@protoc_insertion_point(field_release:graph.Latency.parsing)
  
  return parsing_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Latency::set_allocated_parsing(::std::string* parsing) {
  if (parsing != NULL) {
    
  } else {
    
  }
  parsing_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parsing);
  // @@protoc_insertion_point(field_set_allocated:graph.Latency.parsing)
}

// optional string processing = 2;
void Latency::clear_processing() {
  processing_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Latency::processing() const {
  // @@protoc_insertion_point(field_get:graph.Latency.processing)
  return processing_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Latency::set_processing(const ::std::string& value) {
  
  processing_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:graph.Latency.processing)
}
 void Latency::set_processing(const char* value) {
  
  processing_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:graph.Latency.processing)
}
 void Latency::set_processing(const char* value, size_t size) {
  
  processing_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:graph.Latency.processing)
}
 ::std::string* Latency::mutable_processing() {
  
  // @@protoc_insertion_point(field_mutable:graph.Latency.processing)
  return processing_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Latency::release_processing() {
  // @@protoc_insertion_point(field_release:graph.Latency.processing)
  
  return processing_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Latency::set_allocated_processing(::std::string* processing) {
  if (processing != NULL) {
    
  } else {
    
  }
  processing_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), processing);
  // @@protoc_insertion_point(field_set_allocated:graph.Latency.processing)
}

// optional string pb = 3;
void Latency::clear_pb() {
  pb_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Latency::pb() const {
  // @@protoc_insertion_point(field_get:graph.Latency.pb)
  return pb_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Latency::set_pb(const ::std::string& value) {
  
  pb_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:graph.Latency.pb)
}
 void Latency::set_pb(const char* value) {
  
  pb_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:graph.Latency.pb)
}
 void Latency::set_pb(const char* value, size_t size) {
  
  pb_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:graph.Latency.pb)
}
 ::std::string* Latency::mutable_pb() {
  
  // @@protoc_insertion_point(field_mutable:graph.Latency.pb)
  return pb_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Latency::release_pb() {
  // @@protoc_insertion_point(field_release:graph.Latency.pb)
  
  return pb_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Latency::set_allocated_pb(::std::string* pb) {
  if (pb != NULL) {
    
  } else {
    
  }
  pb_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pb);
  // @@protoc_insertion_point(field_set_allocated:graph.Latency.pb)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Property::kPropFieldNumber;
const int Property::kValFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Property::Property()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:graph.Property)
}

void Property::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Property::Property(const Property& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:graph.Property)
}

void Property::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  prop_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  val_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Property::~Property() {
  // @@protoc_insertion_point(destructor:graph.Property)
  SharedDtor();
}

void Property::SharedDtor() {
  prop_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  val_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Property::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Property::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Property_descriptor_;
}

const Property& Property::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_graphresponse_2eproto();
  return *default_instance_;
}

Property* Property::default_instance_ = NULL;

Property* Property::New(::google::protobuf::Arena* arena) const {
  Property* n = new Property;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Property::Clear() {
// @@protoc_insertion_point(message_clear_start:graph.Property)
  prop_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  val_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Property::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:graph.Property)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string prop = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prop()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->prop().data(), this->prop().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "graph.Property.prop"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_val;
        break;
      }

      // optional bytes val = 2;
      case 2: {
        if (tag == 18) {
         parse_val:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_val()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:graph.Property)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:graph.Property)
  return false;
#undef DO_
}

void Property::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:graph.Property)
  // optional string prop = 1;
  if (this->prop().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prop().data(), this->prop().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "graph.Property.prop");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->prop(), output);
  }

  // optional bytes val = 2;
  if (this->val().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->val(), output);
  }

  // @@protoc_insertion_point(serialize_end:graph.Property)
}

::google::protobuf::uint8* Property::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:graph.Property)
  // optional string prop = 1;
  if (this->prop().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prop().data(), this->prop().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "graph.Property.prop");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->prop(), target);
  }

  // optional bytes val = 2;
  if (this->val().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->val(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:graph.Property)
  return target;
}

int Property::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:graph.Property)
  int total_size = 0;

  // optional string prop = 1;
  if (this->prop().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->prop());
  }

  // optional bytes val = 2;
  if (this->val().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->val());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Property::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:graph.Property)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Property* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Property>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:graph.Property)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:graph.Property)
    MergeFrom(*source);
  }
}

void Property::MergeFrom(const Property& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:graph.Property)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.prop().size() > 0) {

    prop_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prop_);
  }
  if (from.val().size() > 0) {

    val_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.val_);
  }
}

void Property::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:graph.Property)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Property::CopyFrom(const Property& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:graph.Property)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Property::IsInitialized() const {

  return true;
}

void Property::Swap(Property* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Property::InternalSwap(Property* other) {
  prop_.Swap(&other->prop_);
  val_.Swap(&other->val_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Property::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Property_descriptor_;
  metadata.reflection = Property_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Property

// optional string prop = 1;
void Property::clear_prop() {
  prop_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Property::prop() const {
  // @@protoc_insertion_point(field_get:graph.Property.prop)
  return prop_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Property::set_prop(const ::std::string& value) {
  
  prop_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:graph.Property.prop)
}
 void Property::set_prop(const char* value) {
  
  prop_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:graph.Property.prop)
}
 void Property::set_prop(const char* value, size_t size) {
  
  prop_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:graph.Property.prop)
}
 ::std::string* Property::mutable_prop() {
  
  // @@protoc_insertion_point(field_mutable:graph.Property.prop)
  return prop_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Property::release_prop() {
  // @@protoc_insertion_point(field_release:graph.Property.prop)
  
  return prop_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Property::set_allocated_prop(::std::string* prop) {
  if (prop != NULL) {
    
  } else {
    
  }
  prop_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prop);
  // @@protoc_insertion_point(field_set_allocated:graph.Property.prop)
}

// optional bytes val = 2;
void Property::clear_val() {
  val_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Property::val() const {
  // @@protoc_insertion_point(field_get:graph.Property.val)
  return val_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Property::set_val(const ::std::string& value) {
  
  val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:graph.Property.val)
}
 void Property::set_val(const char* value) {
  
  val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:graph.Property.val)
}
 void Property::set_val(const void* value, size_t size) {
  
  val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:graph.Property.val)
}
 ::std::string* Property::mutable_val() {
  
  // @@protoc_insertion_point(field_mutable:graph.Property.val)
  return val_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Property::release_val() {
  // @@protoc_insertion_point(field_release:graph.Property.val)
  
  return val_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Property::set_allocated_val(::std::string* val) {
  if (val != NULL) {
    
  } else {
    
  }
  val_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), val);
  // @@protoc_insertion_point(field_set_allocated:graph.Property.val)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Node::kUidFieldNumber;
const int Node::kXidFieldNumber;
const int Node::kAttributeFieldNumber;
const int Node::kPropertiesFieldNumber;
const int Node::kChildrenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Node::Node()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:graph.Node)
}

void Node::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Node::Node(const Node& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:graph.Node)
}

void Node::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  xid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attribute_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:graph.Node)
  SharedDtor();
}

void Node::SharedDtor() {
  xid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attribute_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Node::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Node::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Node_descriptor_;
}

const Node& Node::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_graphresponse_2eproto();
  return *default_instance_;
}

Node* Node::default_instance_ = NULL;

Node* Node::New(::google::protobuf::Arena* arena) const {
  Node* n = new Node;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Node::Clear() {
// @@protoc_insertion_point(message_clear_start:graph.Node)
  uid_ = GOOGLE_ULONGLONG(0);
  xid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attribute_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  properties_.Clear();
  children_.Clear();
}

bool Node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:graph.Node)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_xid;
        break;
      }

      // optional string xid = 2;
      case 2: {
        if (tag == 18) {
         parse_xid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->xid().data(), this->xid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "graph.Node.xid"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_attribute;
        break;
      }

      // optional string attribute = 3;
      case 3: {
        if (tag == 26) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attribute()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->attribute().data(), this->attribute().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "graph.Node.attribute"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_properties;
        break;
      }

      // repeated .graph.Property properties = 4;
      case 4: {
        if (tag == 34) {
         parse_properties:
          DO_(input->IncrementRecursionDepth());
         parse_loop_properties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_properties()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_properties;
        if (input->ExpectTag(42)) goto parse_loop_children;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .graph.Node children = 5;
      case 5: {
        if (tag == 42) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_children:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_children()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_children;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:graph.Node)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:graph.Node)
  return false;
#undef DO_
}

void Node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:graph.Node)
  // optional uint64 uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional string xid = 2;
  if (this->xid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->xid().data(), this->xid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "graph.Node.xid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->xid(), output);
  }

  // optional string attribute = 3;
  if (this->attribute().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->attribute().data(), this->attribute().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "graph.Node.attribute");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->attribute(), output);
  }

  // repeated .graph.Property properties = 4;
  for (unsigned int i = 0, n = this->properties_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->properties(i), output);
  }

  // repeated .graph.Node children = 5;
  for (unsigned int i = 0, n = this->children_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->children(i), output);
  }

  // @@protoc_insertion_point(serialize_end:graph.Node)
}

::google::protobuf::uint8* Node::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:graph.Node)
  // optional uint64 uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional string xid = 2;
  if (this->xid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->xid().data(), this->xid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "graph.Node.xid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->xid(), target);
  }

  // optional string attribute = 3;
  if (this->attribute().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->attribute().data(), this->attribute().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "graph.Node.attribute");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->attribute(), target);
  }

  // repeated .graph.Property properties = 4;
  for (unsigned int i = 0, n = this->properties_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->properties(i), target);
  }

  // repeated .graph.Node children = 5;
  for (unsigned int i = 0, n = this->children_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->children(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:graph.Node)
  return target;
}

int Node::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:graph.Node)
  int total_size = 0;

  // optional uint64 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uid());
  }

  // optional string xid = 2;
  if (this->xid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->xid());
  }

  // optional string attribute = 3;
  if (this->attribute().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->attribute());
  }

  // repeated .graph.Property properties = 4;
  total_size += 1 * this->properties_size();
  for (int i = 0; i < this->properties_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->properties(i));
  }

  // repeated .graph.Node children = 5;
  total_size += 1 * this->children_size();
  for (int i = 0; i < this->children_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->children(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Node::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:graph.Node)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Node* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Node>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:graph.Node)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:graph.Node)
    MergeFrom(*source);
  }
}

void Node::MergeFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:graph.Node)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  properties_.MergeFrom(from.properties_);
  children_.MergeFrom(from.children_);
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.xid().size() > 0) {

    xid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.xid_);
  }
  if (from.attribute().size() > 0) {

    attribute_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attribute_);
  }
}

void Node::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:graph.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node::CopyFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:graph.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {

  return true;
}

void Node::Swap(Node* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Node::InternalSwap(Node* other) {
  std::swap(uid_, other->uid_);
  xid_.Swap(&other->xid_);
  attribute_.Swap(&other->attribute_);
  properties_.UnsafeArenaSwap(&other->properties_);
  children_.UnsafeArenaSwap(&other->children_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Node::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Node_descriptor_;
  metadata.reflection = Node_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Node

// optional uint64 uid = 1;
void Node::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Node::uid() const {
  // @@protoc_insertion_point(field_get:graph.Node.uid)
  return uid_;
}
 void Node::set_uid(::google::protobuf::uint64 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:graph.Node.uid)
}

// optional string xid = 2;
void Node::clear_xid() {
  xid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Node::xid() const {
  // @@protoc_insertion_point(field_get:graph.Node.xid)
  return xid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Node::set_xid(const ::std::string& value) {
  
  xid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:graph.Node.xid)
}
 void Node::set_xid(const char* value) {
  
  xid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:graph.Node.xid)
}
 void Node::set_xid(const char* value, size_t size) {
  
  xid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:graph.Node.xid)
}
 ::std::string* Node::mutable_xid() {
  
  // @@protoc_insertion_point(field_mutable:graph.Node.xid)
  return xid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Node::release_xid() {
  // @@protoc_insertion_point(field_release:graph.Node.xid)
  
  return xid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Node::set_allocated_xid(::std::string* xid) {
  if (xid != NULL) {
    
  } else {
    
  }
  xid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), xid);
  // @@protoc_insertion_point(field_set_allocated:graph.Node.xid)
}

// optional string attribute = 3;
void Node::clear_attribute() {
  attribute_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Node::attribute() const {
  // @@protoc_insertion_point(field_get:graph.Node.attribute)
  return attribute_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Node::set_attribute(const ::std::string& value) {
  
  attribute_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:graph.Node.attribute)
}
 void Node::set_attribute(const char* value) {
  
  attribute_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:graph.Node.attribute)
}
 void Node::set_attribute(const char* value, size_t size) {
  
  attribute_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:graph.Node.attribute)
}
 ::std::string* Node::mutable_attribute() {
  
  // @@protoc_insertion_point(field_mutable:graph.Node.attribute)
  return attribute_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Node::release_attribute() {
  // @@protoc_insertion_point(field_release:graph.Node.attribute)
  
  return attribute_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Node::set_allocated_attribute(::std::string* attribute) {
  if (attribute != NULL) {
    
  } else {
    
  }
  attribute_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attribute);
  // @@protoc_insertion_point(field_set_allocated:graph.Node.attribute)
}

// repeated .graph.Property properties = 4;
int Node::properties_size() const {
  return properties_.size();
}
void Node::clear_properties() {
  properties_.Clear();
}
const ::graph::Property& Node::properties(int index) const {
  // @@protoc_insertion_point(field_get:graph.Node.properties)
  return properties_.Get(index);
}
::graph::Property* Node::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:graph.Node.properties)
  return properties_.Mutable(index);
}
::graph::Property* Node::add_properties() {
  // @@protoc_insertion_point(field_add:graph.Node.properties)
  return properties_.Add();
}
::google::protobuf::RepeatedPtrField< ::graph::Property >*
Node::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:graph.Node.properties)
  return &properties_;
}
const ::google::protobuf::RepeatedPtrField< ::graph::Property >&
Node::properties() const {
  // @@protoc_insertion_point(field_list:graph.Node.properties)
  return properties_;
}

// repeated .graph.Node children = 5;
int Node::children_size() const {
  return children_.size();
}
void Node::clear_children() {
  children_.Clear();
}
const ::graph::Node& Node::children(int index) const {
  // @@protoc_insertion_point(field_get:graph.Node.children)
  return children_.Get(index);
}
::graph::Node* Node::mutable_children(int index) {
  // @@protoc_insertion_point(field_mutable:graph.Node.children)
  return children_.Mutable(index);
}
::graph::Node* Node::add_children() {
  // @@protoc_insertion_point(field_add:graph.Node.children)
  return children_.Add();
}
::google::protobuf::RepeatedPtrField< ::graph::Node >*
Node::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:graph.Node.children)
  return &children_;
}
const ::google::protobuf::RepeatedPtrField< ::graph::Node >&
Node::children() const {
  // @@protoc_insertion_point(field_list:graph.Node.children)
  return children_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response::kNFieldNumber;
const int Response::kLFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response::Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:graph.Response)
}

void Response::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  n_ = const_cast< ::graph::Node*>(&::graph::Node::default_instance());
  l_ = const_cast< ::graph::Latency*>(&::graph::Latency::default_instance());
}

Response::Response(const Response& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:graph.Response)
}

void Response::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  n_ = NULL;
  l_ = NULL;
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:graph.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  if (this != default_instance_) {
    delete n_;
    delete l_;
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_descriptor_;
}

const Response& Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_graphresponse_2eproto();
  return *default_instance_;
}

Response* Response::default_instance_ = NULL;

Response* Response::New(::google::protobuf::Arena* arena) const {
  Response* n = new Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:graph.Response)
  if (GetArenaNoVirtual() == NULL && n_ != NULL) delete n_;
  n_ = NULL;
  if (GetArenaNoVirtual() == NULL && l_ != NULL) delete l_;
  l_ = NULL;
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:graph.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .graph.Node n = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_n()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_l;
        break;
      }

      // optional .graph.Latency l = 2;
      case 2: {
        if (tag == 18) {
         parse_l:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_l()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:graph.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:graph.Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:graph.Response)
  // optional .graph.Node n = 1;
  if (this->has_n()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->n_, output);
  }

  // optional .graph.Latency l = 2;
  if (this->has_l()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->l_, output);
  }

  // @@protoc_insertion_point(serialize_end:graph.Response)
}

::google::protobuf::uint8* Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:graph.Response)
  // optional .graph.Node n = 1;
  if (this->has_n()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->n_, target);
  }

  // optional .graph.Latency l = 2;
  if (this->has_l()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->l_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:graph.Response)
  return target;
}

int Response::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:graph.Response)
  int total_size = 0;

  // optional .graph.Node n = 1;
  if (this->has_n()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->n_);
  }

  // optional .graph.Latency l = 2;
  if (this->has_l()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->l_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:graph.Response)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Response* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:graph.Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:graph.Response)
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:graph.Response)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_n()) {
    mutable_n()->::graph::Node::MergeFrom(from.n());
  }
  if (from.has_l()) {
    mutable_l()->::graph::Latency::MergeFrom(from.l());
  }
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:graph.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:graph.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {

  return true;
}

void Response::Swap(Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response::InternalSwap(Response* other) {
  std::swap(n_, other->n_);
  std::swap(l_, other->l_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_descriptor_;
  metadata.reflection = Response_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Response

// optional .graph.Node n = 1;
bool Response::has_n() const {
  return !_is_default_instance_ && n_ != NULL;
}
void Response::clear_n() {
  if (GetArenaNoVirtual() == NULL && n_ != NULL) delete n_;
  n_ = NULL;
}
const ::graph::Node& Response::n() const {
  // @@protoc_insertion_point(field_get:graph.Response.n)
  return n_ != NULL ? *n_ : *default_instance_->n_;
}
::graph::Node* Response::mutable_n() {
  
  if (n_ == NULL) {
    n_ = new ::graph::Node;
  }
  // @@protoc_insertion_point(field_mutable:graph.Response.n)
  return n_;
}
::graph::Node* Response::release_n() {
  // @@protoc_insertion_point(field_release:graph.Response.n)
  
  ::graph::Node* temp = n_;
  n_ = NULL;
  return temp;
}
void Response::set_allocated_n(::graph::Node* n) {
  delete n_;
  n_ = n;
  if (n) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:graph.Response.n)
}

// optional .graph.Latency l = 2;
bool Response::has_l() const {
  return !_is_default_instance_ && l_ != NULL;
}
void Response::clear_l() {
  if (GetArenaNoVirtual() == NULL && l_ != NULL) delete l_;
  l_ = NULL;
}
const ::graph::Latency& Response::l() const {
  // @@protoc_insertion_point(field_get:graph.Response.l)
  return l_ != NULL ? *l_ : *default_instance_->l_;
}
::graph::Latency* Response::mutable_l() {
  
  if (l_ == NULL) {
    l_ = new ::graph::Latency;
  }
  // @@protoc_insertion_point(field_mutable:graph.Response.l)
  return l_;
}
::graph::Latency* Response::release_l() {
  // @@protoc_insertion_point(field_release:graph.Response.l)
  
  ::graph::Latency* temp = l_;
  l_ = NULL;
  return temp;
}
void Response::set_allocated_l(::graph::Latency* l) {
  delete l_;
  l_ = l;
  if (l) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:graph.Response.l)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace graph

// @@protoc_insertion_point(global_scope)
